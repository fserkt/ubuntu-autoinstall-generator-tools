#!/bin/bash

#This script will be executed *after* all the other init scripts.
#You can put your own initialization stuff in here if you don't
#want to do the full Sys V style init stuff.


file="/etc/rc.local"

# the following functions are used for logging purposes and are not recommended to be modified
# set extraiable value
DATE=`date "+%Y-%m-%d %H:%M:%S"`
USER=`whoami`
HOST_NAME=`hostname`
LOG_FILE="/var/log/rc-local.log"

# Execution successful log printing path
function log_info () {
    echo "${DATE} ${HOST_NAME} ${USER} execute $0 [INFO] $@" >> ${LOG_FILE}
}

# Execution successful ‚ö†Ô∏è warning log print path
function log_warn () {
    echo "${DATE} ${HOST_NAME} ${USER} execute $0 [WARN] $@" >> ${LOG_FILE}
}

# Execution failure log print path
function log_error () {
    echo -e "\033[41;37m ${DATE} ${HOST_NAME} ${USER} execute $0 [ERROR] $@ \033[0m"  >> ${LOG_FILE}
}

function fn_log ()  {
    if [  $? -eq 0  ]
    then
            log_info "üëç $@ sucessed."
            echo -e "\033[32m $@ sucessed. \033[0m"
    else
            log_error "üëø $@ failed."
            echo -e "\033[41;37m $@ failed. \033[0m"
            exit 1
    fi
}


template_file="/opt/template.xml"
while true; do
    process_num=`ps -ef | grep libvirtd  | grep -v grep | wc -l`
    if [ $process_num -eq 0 ]; then
        log_info "waiting for 2s"
        sleep 2
    else
        log_info "waiting for 2s"
        sleep 2
        log_info  "Deploy a VM and enable automatic startup for the VM"
        virsh define ${template_file}
        if [ $? -eq 0 ]; then
            log_info  "enable automatic startup for the silver-peak"
            virsh start silver-peak
            virsh autostart silver-peak
            state=$(virsh list --all  | awk 'NR==3' | awk '{print $3$4}')
            if [  ${state} == "running" ]; then
                log_info  "silver-peak is running"
                rm -rf ${template_file}
                break
            else
                log_error "silver-peak cannot be started "
                break
            fi
        else
            log_error "template file parameter error "
            break
        fi
    fi
done

# exec script file
source /opt/allmulticast.sh
log_info  "exec script file /opt/allmulticast.sh"
#fn_log "Clean files ${file}"
#rm  -f ${file}
exit 0